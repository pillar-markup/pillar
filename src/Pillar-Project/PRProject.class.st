"
(PRCompilationPipeline buildPipe: PRPillarConfiguration new).

projectDirectory := '../test' asFileReference.
projectDirectory ensureDeleteAll.
projectDirectory ensureCreateDirectory.
project := PRProject on: projectDirectory.
project wipeout.
project archetype: 'welcome'.
project build: PRHtmlOutput new.

projectDirectory := '../test' asFileReference.
projectDirectory ensureDeleteAll.
projectDirectory ensureCreateDirectory.
project := PRProject on: projectDirectory.
project wipeout.
project archetype: 'presentation'.
project build: PRHtmlOutput new.
project build: PRPdfOutput new.

projectDirectory := '../test' asFileReference.
projectDirectory ensureDeleteAll.
projectDirectory ensureCreateDirectory.
project := PRProject on: projectDirectory.
project wipeout.
project archetype: 'book'.
project build: PRHtmlOutput new.
project build: PRPdfOutput new.

projectDirectory := '../test' asFileReference.
projectDirectory ensureDeleteAll.
projectDirectory ensureCreateDirectory.
project := PRProject on: projectDirectory.
project wipeout.
project archetype: 'basic-latex'.
project build: PRHtmlOutput new.
project build: PRPdfOutput new.
"
Class {
	#name : #PRProject,
	#superclass : #PRObject,
	#instVars : [
		'baseDirectory'
	],
	#category : 'Pillar-Project-Core'
}

{ #category : #testing }
PRProject class >> isAbstract [
	^ false
]

{ #category : #'instance creation' }
PRProject class >> on: aDirectory [

	^ self new
		baseDirectory: aDirectory;
		yourself
]

{ #category : #accessing }
PRProject class >> pathToString: aPath [
	^ aPath pillarPrintString
]

{ #category : #archetypes }
PRProject >> archetypeNamed: aString [ 
	
	^ PRArchetype new
		name: aString;
		project: self;
		yourself
]

{ #category : #accessing }
PRProject >> baseDirectory [
	^ baseDirectory
]

{ #category : #accessing }
PRProject >> baseDirectory: aFileReference [ 
	baseDirectory := aFileReference
]

{ #category : #building }
PRProject >> build: output [
	"Output is an instance of subclass of PRTarget"
	self prepareForTarget: output.
	output buildOn: self
]

{ #category : #accessing }
PRProject >> configuration [
	
	| readConfiguration extension |
	extension := Dictionary new.
	extension at: 'baseDirectory' put: self baseDirectory.
	extension at: 'outputDirectory' put: self defaultOutputDirectoryName.
	
	"Just for backwrds compatibility"
	extension at: '_project' put: self.
	
	readConfiguration := self configurationFileReference exists
		ifFalse: [ ConfigurationForPillar newFromDictionary: extension ]
		ifTrue: [ ConfigurationForPillar newFromFile: self configurationFileReference extendedWith: extension ].
	^ readConfiguration
]

{ #category : #accessing }
PRProject >> configurationFileReference [
	
	^ self baseDirectory / 'pillar.conf'
]

{ #category : #building }
PRProject >> contributeToPipelineBuilding: aPRPipelineBuilder [ 
	
	self plugins do: [ :each | each contributeToPipelineBuilding: aPRPipelineBuilder ]
]

{ #category : #accessing }
PRProject >> defaultOutputDirectoryName [
	^ Path from: '_result'
]

{ #category : #archetypes }
PRProject >> installArchetypeNamed: archetypeName [
	
	| archetype |
	archetype := self archetypeNamed: archetypeName.
	archetype validateExists.
	archetype installIn: self baseDirectory
]

{ #category : #templates }
PRProject >> installTemplateNamed: archetypeName [ 
	
	| archetype |
	archetype := self archetypeNamed: archetypeName.
	archetype validateExists.
	archetype installTemplateIn: self baseDirectory
]

{ #category : #accessing }
PRProject >> outputDirectory [
	
	^ self configuration baseDirectory resolve: self configuration outputDirectory
]

{ #category : #accessing }
PRProject >> plugins [
	
	^ (self configuration propertyAt: #plugins ifAbsent: [ #() ])
			collect: [ :each | | plugin |
				plugin := Smalltalk globals
					at: each asSymbol
					ifAbsent: [ self error: 'Could not resolve plugin: ', each ].
				plugin new ]
]

{ #category : #building }
PRProject >> prepareForTarget: target [

	target prepareForExecutionOn: self.
	self plugins do: [ :each | each prepareForExecutionOn: self ]
]

{ #category : #accessing }
PRProject >> supportDirectory [
	
	^ self baseDirectory / '_support'
]

{ #category : #accessing }
PRProject >> tableOfContents [
	| tocFilePath tocFileName inputDoc |
	tocFilePath := self configuration propertyAt: 'tocFile' ifAbsent: [ ^ PRToc new ].
	tocFileName := self class pathToString: tocFilePath.
	inputDoc := PRPillarParser parse: (self baseDirectory / tocFileName) contents.
	^ PRTocBuilderVisitor new
		documentSource: self baseDirectory / tocFileName;
		currentFile: tocFileName;
		inProcessFiles: (Array with: self baseDirectory / tocFileName);
		visit: inputDoc
]

{ #category : #actions }
PRProject >> wipeout [
	
	self outputDirectory ensureDeleteAll
]
